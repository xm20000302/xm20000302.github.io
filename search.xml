<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/02/10/SpringBoot/"/>
      <url>/2022/02/10/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="第一章-JavaConfig"><a href="#第一章-JavaConfig" class="headerlink" title="第一章  JavaConfig"></a>第一章  JavaConfig</h2><ol><li><p>为什么要使用 Spring Boot</p><p>因为Spring， SpringMVC 需要使用的大量的配置文件 （xml文件）</p><p>还需要配置各种对象，把使用的对象放入到spring容器中才能使用对象</p><p>需要了解其他框架配置规则。</p></li><li><p>SpringBoot 就相当于 不需要配置文件的Spring+SpringMVC。 常用的框架和第三方库都已经配置好了。</p><p>拿来就可以使用了。</p></li><li><p>SpringBoot开发效率高，使用方便多了</p></li></ol><h3 id="1-1-JavaConfig"><a href="#1-1-JavaConfig" class="headerlink" title="1.1 JavaConfig"></a>1.1 JavaConfig</h3><p>JavaConfig: 使用java类作为xml配置文件的替代， 是配置spring容器的纯java的方式。 在这个java类这可以创建java对象，把对象放入spring容器中（注入到容器）， </p><p>使用两个注解：</p><p>1）@Configuration ： 放在一个类的上面，表示这个类是作为配置文件使用的。</p><p>2）@Bean：声明对象，把对象注入到容器中。</p><pre class=" language-java"><code class="language-java">例子：<span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Configuration:表示当前类是作为配置文件使用的。 就是用来配置容器的 *       位置：在类的上面 * *  SpringConfig这个类就相当于beans.xml */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建方法，方法的返回值是对象。 在方法的上面加入@Bean     * 方法的返回值对象就注入到容器中。     *     * @Bean: 把对象注入到spring容器中。 作用相当于&lt;bean>     *     *     位置：方法的上面     *     *     说明：@Bean,不指定对象的名称，默认是方法名是 id     *     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Student <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student s1  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 指定对象在容器中的名称（指定&lt;bean>的id属性）     * @Bean的name属性，指定对象的名称（id）     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"lisiStudent"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Student <span class="token function">makeStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student s2  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="1-2-ImporResource"><a href="#1-2-ImporResource" class="headerlink" title="1.2 @ImporResource"></a>1.2 @ImporResource</h3><p>@ImportResource 作用导入其他的xml配置文件， 等于 在xml </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resources</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>其他配置文件<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="1-3-PropertyResource"><a href="#1-3-PropertyResource" class="headerlink" title="1.3 @PropertyResource"></a>1.3 @PropertyResource</h3><p>@PropertyResource: 读取properties属性配置文件。 使用属性配置文件可以实现外部化配置 ，</p><p>在程序代码之外提供数据。</p><p>步骤：</p><ol><li>在resources目录下，创建properties文件， 使用k&#x3D;v的格式提供数据</li><li>在PropertyResource 指定properties文件的位置</li><li>使用@Value（value&#x3D;”${key}”）</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:config.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.vo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="第二-章-Spring-Boot"><a href="#第二-章-Spring-Boot" class="headerlink" title="第二 章 Spring Boot"></a>第二 章 Spring Boot</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>SpringBoot是Spring中的一个成员， 可以简化Spring，SpringMVC的使用。 他的核心还是IOC容器。</p><p>特点：</p><ul><li><p>Create stand-alone Spring applications</p><p> 创建spring应用</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p><p>内嵌的tomcat， jetty ， Undertow </p></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p><p>提供了starter起步依赖，简化应用的配置。   </p><p>比如使用MyBatis框架 ， 需要在Spring项目中，配置MyBatis的对象 SqlSessionFactory ， Dao的代理对象</p><p>在SpringBoot项目中，在pom.xml里面, 加入一个 mybatis-spring-boot-starter依赖</p></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p><p>尽可能去配置spring和第三方库。叫做自动配置（就是把spring中的，第三方库中的对象都创建好，放到容器中， 开发人员可以直接使用）</p></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p><p> 提供了健康检查， 统计，外部化配置</p></li><li><p>Absolutely no code generation and no requirement for XML configuration</p><p>不用生成代码， 不用使用xml，做配置</p></li></ul><h3 id="2-2-创建Spring-Boot项目"><a href="#2-2-创建Spring-Boot项目" class="headerlink" title="2.2 创建Spring Boot项目"></a>2.2 创建Spring Boot项目</h3><h3 id="2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用"><a href="#2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用" class="headerlink" title="2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用"></a>2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用</h3><p>使用的地址： <a href="https://start.spring.io/">https://start.spring.io</a></p><p>SpringBoot项目的结构：</p><p><img src="D:\course\25-SpringBoot\笔记\images\image-20210115152427829.png" alt="image-20210115152427829">    </p><h3 id="2-2-1-使用国内的地址"><a href="#2-2-1-使用国内的地址" class="headerlink" title="2.2.1  使用国内的地址"></a>2.2.1  使用国内的地址</h3><p><a href="https://start.springboot.io/">https://start.springboot.io</a></p><p><img src="D:\course\25-SpringBoot\笔记\images\image-20210115155556662.png" alt="image-20210115155556662">    </p><h3 id="2-3-注解的使用"><a href="#2-3-注解的使用" class="headerlink" title="2.3  注解的使用"></a>2.3  注解的使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>符合注解：由<span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span>        <span class="token number">1</span><span class="token punctuation">.</span>@SpringBootConfiguration    <span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    <span class="token keyword">boolean</span> <span class="token function">proxyBeanMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>说明：使用了<span class="token annotation punctuation">@SpringBootConfiguration</span>注解标注的类，可以作为配置文件使用的，    可以使用Bean声明对象，注入到容器</code></pre><p>2.@EnableAutoConfiguration</p><p>启用自动配置， 把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入到容器中</p><p>3.@ComponentScan</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span> 扫描器，找到注解，根据注解的功能创建对象，给属性赋值等等。默认扫描的包： <span class="token annotation punctuation">@ComponentScan</span>所在的类所在的包和子包。    </code></pre><h3 id="2-4-SpringBoot的配置文件"><a href="#2-4-SpringBoot的配置文件" class="headerlink" title="2.4 SpringBoot的配置文件"></a>2.4 SpringBoot的配置文件</h3><p>配置文件名称： application</p><p>扩展名有： properties( k&#x3D;v) ;  yml ( k: v)</p><p>使用application.properties,   application.yml</p><p>例1：application.properties设置 端口和上下文</p><pre class=" language-xml"><code class="language-xml">#设置端口号server.port=8082#设置访问应用上下文路径， contextpathserver.servlet.context-path=/myboot</code></pre><p>例2： application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /myboot2</code></pre><h3 id="2-5-多环境配置"><a href="#2-5-多环境配置" class="headerlink" title="2.5 多环境配置"></a>2.5 多环境配置</h3><p>有开发环境， 测试环境， 上线的环境。</p><p>每个环境有不同的配置信息， 例如端口， 上下文件， 数据库url，用户名，密码等等</p><p>使用多环境配置文件，可以方便的切换不同的配置。</p><p>使用方式： 创建多个配置文件， 名称规则： application-环境名称.properties(yml)</p><p>创建开发环境的配置文件： application-dev.properties(  application-dev.yml )</p><p>创建测试者使用的配置： application-test.properties</p><h3 id="2-6-ConfigurationProperties"><a href="#2-6-ConfigurationProperties" class="headerlink" title="2.6 @ConfigurationProperties"></a>2.6 @ConfigurationProperties</h3><p>@ConfigurationProperties: 把配置文件的数据映射为java对象。</p><p>属性：prefix 配置文件中的某些key的开头的内容。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"school"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolInfo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String website<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getWebsite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> website<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWebsite</span><span class="token punctuation">(</span>String website<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>website <span class="token operator">=</span> website<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"SchoolInfo&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", website='"</span> <span class="token operator">+</span> website <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>application.properties</p><pre class=" language-pro"><code class="language-pro">#配置端口号server.port=8082#context-pathserver.servlet.context-path=/myboot#自定义key=valueschool.name=动力节点school.website=www.bjpowernode.comschool.address=北京的大兴区site=www.bjpowernode.com</code></pre><h3 id="2-7-使用jsp"><a href="#2-7-使用jsp" class="headerlink" title="2.7  使用jsp"></a>2.7  使用jsp</h3><p>SpringBoot不推荐使用jsp ，而是使用模板技术代替jsp</p><p>使用jsp需要配置：</p><p>1） 加入一个处理jsp的依赖。 负责编译jsp文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>如果需要使用servlet， jsp，jstl的功能</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>创建一个存放jsp的目录，一般叫做webapp</li></ol><p>​    index.jsp</p><ol start="4"><li>需要在pom.xml指定jsp文件编译后的存放目录。</li></ol><p>  META-INF&#x2F;resources</p><p>5）创建Controller， 访问jsp</p><p>6）在application.propertis文件中配置视图解析器</p><h3 id="2-8-使用容器"><a href="#2-8-使用容器" class="headerlink" title="2.8 使用容器"></a>2.8 使用容器</h3><p>你想通过代码，从容器中获取对象。</p><p>通过SpringApplication.run(Application.class, args); 返回值获取容器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> primarySource<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>primarySource<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>ConfigurableApplicationContext <span class="token operator">:</span> 接口，是ApplicationContext的子接口<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span></code></pre><h3 id="2-9-ComnandLineRunner-接口-，-ApplcationRunner接口"><a href="#2-9-ComnandLineRunner-接口-，-ApplcationRunner接口" class="headerlink" title="2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口"></a>2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口</h3><p>这两个接口都 有一个run方法。 执行时间在容器对象创建好后， 自动执行run（）方法。</p><p>可以完成自定义的在容器对象创建好的一些操作。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="第三章-Web组件"><a href="#第三章-Web组件" class="headerlink" title="第三章 Web组件"></a>第三章 Web组件</h2><p>讲三个内容： 拦截器， Servlet ，Filter</p><h3 id="3-1-拦截器"><a href="#3-1-拦截器" class="headerlink" title="3.1 拦截器"></a>3.1 拦截器</h3><p>拦截器是SpringMVC中一种对象，能拦截器对Controller的请求。</p><p>拦截器框架中有系统的拦截器， 还可以自定义拦截器。  实现对请求预先处理。</p><p>实现自定义拦截器：</p><ol><li><p>创建类实现SpringMVC框架的HandlerInterceptor接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><p>2.需在SpringMVC的配置文件中，声明拦截器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        &lt;mvc:path="url" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>拦截器类全限定名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot中注册拦截器：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加拦截器对象， 注入到容器中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建拦截器对象</span>        HandlerInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定拦截的请求uri地址</span>        String path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"/user/**"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定不拦截的地址</span>        String excludePath  <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"/user/login"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-Servlet"><a href="#3-2-Servlet" class="headerlink" title="3.2  Servlet"></a>3.2  Servlet</h3><p>在SpringBoot框架中使用Servlet对象。</p><p>使用步骤：</p><ol><li>创建Servlet类。 创建类继承HttpServlet</li><li>注册Servlet ，让框架能找到Servlet</li></ol><p> 例子：</p><p>1.创建自定义Servlet</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建Servlet类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//使用HttpServletResponse输出数据，应答结果</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter out  <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===执行的是Servlet=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>注册Servlet</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplictionConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义方法， 注册Servlet对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//public ServletRegistrationBean(T servlet, String... urlMappings)</span>        <span class="token comment" spellcheck="true">//第一个参数是 Servlet对象， 第二个是url地址</span>        <span class="token comment" spellcheck="true">//ServletRegistrationBean bean =</span>                <span class="token comment" spellcheck="true">//new ServletRegistrationBean( new MyServlet(),"/myservlet");</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;url-pattern></span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-3-过滤器Filter"><a href="#3-3-过滤器Filter" class="headerlink" title="3.3 过滤器Filter"></a>3.3 过滤器Filter</h3><p>Filter是Servlet规范中的过滤器，可以处理请求， 对请求的参数， 属性进行调整。 常常在过滤器中处理字符编码</p><p>在框架中使用过滤器：</p><ol><li>创建自定义过滤器类</li><li>注册Filter过滤器对象</li></ol><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了MyFilter，doFilter "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>注册Filter</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebApplicationConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FilterRegistrationBean bean  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-4-字符集过滤器"><a href="#3-4-字符集过滤器" class="headerlink" title="3.4 字符集过滤器"></a>3.4 字符集过滤器</h3><p>CharacterEncodingFilter : 解决post请求中乱码的问题</p><p>在SpringMVC框架， 在web.xml 注册过滤器。 配置他的属性。 </p><p>第一种方式：</p><p>使用步骤：</p><ol><li><p>配置字符集过滤器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSystemConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyServlet myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">"/myservlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册Filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FilterRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用框架中的过滤器类</span>        CharacterEncodingFilter filter  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定使用的编码方式</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定request ， response都使用encoding的值</span>        filter<span class="token punctuation">.</span><span class="token function">setForceEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定 过滤的url地址</span>        reg<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>修改application.properties文件， 让自定义的过滤器起作用</p></li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#SpringBoot中默认已经配置了CharacterEncodingFilter。 编码默认ISO-8859-1</span><span class="token comment" spellcheck="true">#设置enabled=false 作用是关闭系统中配置好的过滤器， 使用自定义的CharacterEncodingFilter</span><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><p>第二种方式</p><p>修改application.properties文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9001</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/myboot</span><span class="token comment" spellcheck="true">#让系统的CharacterEncdoingFilter生效</span><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#指定使用的编码方式</span><span class="token attr-name">server.servlet.encoding.charset</span><span class="token punctuation">=</span><span class="token attr-value">utf-8</span><span class="token comment" spellcheck="true">#强制request，response都使用charset属性的值</span><span class="token attr-name">server.servlet.encoding.force</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><h2 id="第四章-ORM-操作-MySQL"><a href="#第四章-ORM-操作-MySQL" class="headerlink" title="第四章 ORM 操作 MySQL"></a>第四章 ORM 操作 MySQL</h2><p>使用MyBatis框架操作数据，  在SpringBoot框架集成MyBatis</p><p>使用步骤：</p><ol><li><p>mybatis起步依赖 ： 完成mybatis对象自动配置， 对象放在容器中</p></li><li><p>pom.xml 指定把src&#x2F;main&#x2F;java目录中的xml文件包含到classpath中</p></li><li><p>创建实体类Student</p></li><li><p>创建Dao接口 StudentDao , 创建一个查询学生的方法 </p></li><li><p>创建Dao接口对应的Mapper文件， xml文件， 写sql语句</p></li><li><p>创建Service层对象， 创建StudentService接口和他的实现类。 去dao对象的方法。完成数据库的操作</p></li><li><p>创建Controller对象，访问Service。</p></li><li><p>写application.properties文件</p><p>配置数据库的连接信息。</p></li></ol><h3 id="第一种方式-：-Mapper"><a href="#第一种方式-：-Mapper" class="headerlink" title="第一种方式 ： @Mapper"></a>第一种方式 ： @Mapper</h3><p>@Mapper：放在dao接口的上面， 每个接口都需要使用这个注解。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Mapper：告诉MyBatis这是dao接口，创建此接口的代理对象。 *     位置：在类的上面 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Student <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"stuId"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="第二种方式-MapperScan"><a href="#第二种方式-MapperScan" class="headerlink" title="第二种方式  @MapperScan"></a>第二种方式  @MapperScan</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @MapperScan: 找到Dao接口和Mapper文件 *     basePackages：Dao接口所在的包名 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"com.bjpowernode.dao"</span><span class="token punctuation">,</span><span class="token string">"com.bjpowernode.mapper"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="第三种方式：-Mapper文件和Dao接口分开管理"><a href="#第三种方式：-Mapper文件和Dao接口分开管理" class="headerlink" title="第三种方式： Mapper文件和Dao接口分开管理"></a>第三种方式： Mapper文件和Dao接口分开管理</h3><p> 现在把Mapper文件放在resources目录下</p><p>1）在resources目录中创建子目录 （自定义的） ， 例如mapper</p><p>2）把mapper文件放到 mapper目录中</p><p>3）在application.properties文件中，指定mapper文件的目录</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定mapper文件的位置</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span><span class="token comment" spellcheck="true">#指定mybatis的日志</span><span class="token attr-name">mybatis.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre><ol start="4"><li>在pom.xml中指定 把resources目录中的文件 ， 编译到目标目录中</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--resources插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h3 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个  事务"></a>第四个  事务</h3><p>Spring框架中的事务：</p><p>1） 管理事务的对象： 事务管理器（接口， 接口有很多的实现类）</p><p>​      例如：使用Jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p><p>2 ) 声明式事务：  在xml配置文件或者使用注解说明事务控制的内容</p><p>​     控制事务： 隔离级别，传播行为， 超时时间</p><p>3）事务处理方式：</p><p>​      1） Spring框架中的@Transactional</p><p>​      2)    aspectj框架可以在xml配置文件中，声明事务控制的内容</p><p>​    </p><p>SpringBoot中使用事务： 上面的两种方式都可以。</p><p>1）在业务方法的上面加入@Transactional ,  加入注解后，方法有事务功能了。</p><p>2）明确的在 主启动类的上面 ，加入@EnableTransactionManager</p><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Transactional: 表示方法的有事务支持 *       默认：使用库的隔离级别， REQUIRED 传播行为； 超时时间  -1 *       抛出运行时异常，回滚事务 */</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addStudent</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务方法addStudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rows  <span class="token operator">=</span>  studentDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行sql语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抛出一个运行时异常， 目的是回滚事务</span>    <span class="token comment" spellcheck="true">//int m   = 10 / 0 ;</span>    <span class="token keyword">return</span> rows<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="第五章-接口架构风格-—RESTful"><a href="#第五章-接口架构风格-—RESTful" class="headerlink" title="第五章 接口架构风格 —RESTful"></a>第五章 接口架构风格 —RESTful</h2><p>接口： API（Application Programming Interface，应用程序接口）是一些预先定义的接口（如函数、HTTP接口），或指<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122">软件系统</a>不同组成部分衔接的约定。 用来提供<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问的一组<a href="https://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B/2390628">例程</a>，而又无需访问源码，或理解内部<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/9905789">工作机制</a>的细节。</p><p>接口（API）： 可以指访问servlet， controller的url，   调用其他程序的 函数</p><p>架构风格： api组织方式（样子）</p><p>   就是一个传统的：    <a href="http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26">http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26</a> </p><p>​                                      在地址上提供了 访问的资源名称addStudent, 在其后使用了get方式传递参数。</p><h3 id="5-1-REST"><a href="#5-1-REST" class="headerlink" title="5.1  REST"></a>5.1  REST</h3><p>RESTful架构风格</p><p>1)REST :  （英文： Representational State Transfer , 中文： 表现层状态转移)。</p><p>   REST：是一种接口的架构风格和设计的理念，不是标准。</p><p>   优点： 更简洁，更有层次</p><p>   表现层状态转移: </p><p>​         表现层就是视图层， 显示资源的， 通过视图页面，jsp等等显示操作资源的结果。</p><p>​          状态： 资源变化</p><p>​         转移： 资源可以变化的。 资源能创建，new状态，  资源创建后可以查询资源， 能看到资源的内容，</p><p>这个资源内容 ，可以被修改， 修改后资源 和之前的不一样。  </p><p>2）REST中的要素：</p><p>   用REST表示资源和对资源的操作。  在互联网中，表示一个资源或者一个操作。 </p><p>   资源使用url表示的， 在互联网， 使用的图片，视频， 文本，网页等等都是资源。</p><p>   资源是用名词表示。</p><p>  对资源： </p><p>​        查询资源： 看，通过url找到资源。 </p><p>​        创建资源： 添加资源</p><p>​        更新资源：更新资源 ，编辑</p><p>​        删除资源： 去除</p><p>​       </p><p> 资源使用url表示，通过名词表示资源。</p><p>​     在url中，使用名词表示资源， 以及访问资源的信息,  在url中，使用“ &#x2F; “ 分隔对资源的信息</p><p>​     <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p> 使用http中的动作（请求方式）， 表示对资源的操作（CURD）</p><p>   GET:  查询资源  –  sql select</p><p>​                 处理单个资源： 用他的单数方式</p><p>​                  <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p>​                 <a href="http://localhost:8080/myboot/student/1001/1">http://localhost:8080/myboot/student/1001/1</a></p><p>​                处理多个资源：使用复数形式</p><p>​                  <a href="http://localhost:8080/myboot/students/1001/1002">http://localhost:8080/myboot/students/1001/1002</a></p><p>​                </p><p>   POST: 创建资源  – sql insert</p><p>​                <a href="http://localhost:8080/myboot/student">http://localhost:8080/myboot/student</a></p><p>​                在post请求中传递数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>   PUT： 更新资源  –  sql  update</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080/myboot/student/1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>   DELETE: 删除资源  – sql delete</p><pre><code>```xml</code></pre><p><a href="http://localhost:8080/myboot/student/1">删除1的数据</a><br>    &#96;&#96;&#96;</p><p> 需要的分页，  排序等参数，依然放在  url的后面， 例如 </p><p> <a href="http://localhost:8080/myboot/students?page=1&amp;pageSize=20">http://localhost:8080/myboot/students?page=1&amp;pageSize=20</a></p><p>   &#96;</p><p>3） 一句话说明REST： </p><p>​    使用url表示资源 ，使用http动作操作资源。</p><ol start="4"><li>注解</li></ol><p>  @PathVariable :  从url中获取数据</p><p>  @GetMapping:    支持的get请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.GET)</p><p>  @PostMapping:  支持post请求方式 ，等同于 @RequestMapping( method&#x3D;RequestMethod.POST)</p><p>  @PutMapping:  支持put请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.PUT)</p><p>   @DeleteMapping: 支持delete请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.DELETE)</p><p>  @RestController:  符合注解， 是@Controller 和@ResponseBody组合。</p><p>​               在类的上面使用@RestController ， 表示当前类者的所有方法都加入了 @ResponseBody</p><ol start="5"><li><p>Postman : 测试工具</p><p>使用Postman : 可以测试 get ，post ， put ，delete 等请求</p></li></ol><h3 id="5-2-在页面中或者ajax中，支持put，delete请求"><a href="#5-2-在页面中或者ajax中，支持put，delete请求" class="headerlink" title="5.2  在页面中或者ajax中，支持put，delete请求"></a>5.2  在页面中或者ajax中，支持put，delete请求</h3><p>在SpringMVC中 有一个过滤器， 支持post请求转为put ,delete</p><p>过滤器： org.springframework.web.filter.HiddenHttpMethodFilter</p><p>作用： 把请求中的post请求转为 put ， delete</p><p>实现步骤：</p><ol><li>application.properties(yml) : 开启使用 HiddenHttpMethodFilter 过滤器</li><li>在请求页面中，包含 _method参数， 他的值是 put， delete  ，  发起这个请求使用的post方式</li></ol><h2 id="第六章-Redis"><a href="#第六章-Redis" class="headerlink" title="第六章 Redis"></a>第六章 Redis</h2><p>Redis ： 一个NoSQL数据库，  常用作 缓存使用 （cache）</p><p>Redis的数据类型： string  ,  hash  ,set  ,zset , list</p><p>Redis是一个中间件： 是一个独立的服务器。</p><p>java中著名的客户端： Jedis ，  lettuce ， Redisson</p><p>Spring,SpringBoot中有 一个RedisTemplate（StringRedisTemplate） ，处理和redis交互  </p><h2 id="6-1-配置Windows版本的redis"><a href="#6-1-配置Windows版本的redis" class="headerlink" title="6.1  配置Windows版本的redis"></a>6.1  配置Windows版本的redis</h2><p>Redis-x64-3.2.100.rar 解压缩到一个 非中文 的目录</p><p>redis-server.exe：服务端， 启动后，不要关闭</p><p>redis-cli.exe：客户端， 访问redis中的数据</p><p>redisclient-win32.x86_64.2.0.jar : Redis图形界面客户端</p><p>执行方式： 在这个文件所在的目录，  执行 java -jar redisclient-win32.x86_64.2.0.jar</p><p>RedisTemplate 使用的  lettuce 客户端库</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--redis起步依赖： 直接在项目中使用RedisTemplate(StringRedisTemplate)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>data-redis使用的   lettuce 客户端库在程序中使用RedisTemplate类的方法 操作redis数据， 实际就是调用的lettuce 客户端的中的方法</code></pre><h2 id="6-2-对比-StringRedisTemplate-和-RedisTemplate"><a href="#6-2-对比-StringRedisTemplate-和-RedisTemplate" class="headerlink" title="6.2 对比 StringRedisTemplate 和 RedisTemplate"></a>6.2 对比 StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate ： 把k，v 都是作为String处理， 使用的是String的序列化 ， 可读性好</p><p>RedisTemplate ： 把k，v 经过了序列化存到redis。 k，v 是序列化的内容， 不能直接识别.</p><p>​                                 默认使用的jdk序列化， 可以修改为前提的序列化</p><p> 序列化：把对象转化为可传输的字节序列过程称为序列化。</p><p>反序列化：把字节序列还原为对象的过程称为反序列化。</p><p>为什么需要序列化</p><p>序列化最终的目的是为了对象可以跨平台存储，和进行网络传输。而我们进行跨平台存储和网络传输的方式就是IO，而我们的IO支持的数据格式就是字节数组。我们必须在把对象转成字节数组的时候就制定一种规则（序列化），那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来（反序列化）。</p><p>什么情况下需要序列化</p><p>通过上面我想你已经知道了凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化。</p><p>本质上存储和网络传输 都需要经过 把一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象信息。</p><p>序列化的方式</p><p>序列化只是一种拆装组装对象的规则，那么这种规则肯定也可能有多种多样，比如现在常见的序列化方式有：</p><p>JDK（不支持跨语言）、JSON、XML、Hessian、Kryo（不支持跨语言）、Thrift、Protofbuff、</p><p>Student( name&#x3D;zs, age&#x3D;20)   —-  { “name”:”zs”, “age”:20 }</p><p>java的序列化： 把java对象转为byte[], 二进制数据</p><p>json序列化：json序列化功能将对象转换为 JSON 格式或从 JSON 格式转换对象。例如把一个Student对象转换为JSON字符串{“name”:”李四”, “age”:29} )，反序列化(将JSON字符串 {“name”:”李四”, “age”:29} 转换为Student对象)</p><p>设置key或者value的序列化方式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用RedisTemplate ，在存取值之前，设置序列化</span><span class="token comment" spellcheck="true">// 设置 key 使用String的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置 value 的序列化</span>redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="第七章-SpringBoot集成Dubbo"><a href="#第七章-SpringBoot集成Dubbo" class="headerlink" title="第七章 SpringBoot集成Dubbo"></a>第七章 SpringBoot集成Dubbo</h2><h2 id="7-1-看-SpringBoot继承Dubbo的文档"><a href="#7-1-看-SpringBoot继承Dubbo的文档" class="headerlink" title="7.1  看 SpringBoot继承Dubbo的文档"></a>7.1  看 SpringBoot继承Dubbo的文档</h2><p> <a href="https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md">https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md</a></p><h2 id="7-2-公共项目"><a href="#7-2-公共项目" class="headerlink" title="7.2  公共项目"></a>7.2  公共项目</h2><p>独立的maven项目： 定义了接口和数据类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1901229007746699151L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Student <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="7-3-提供者"><a href="#7-3-提供者" class="headerlink" title="7.3  提供者"></a>7.3  提供者</h2><p>创建SpringBoot项目</p><p>1） pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--加入公共项目的gav--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>022-interface-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--dubbo依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--zookeeper依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 排除log4j依赖 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>2）实现接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用dubbo中的注解暴露服务 * @Component 可以不用加 */</span><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> StudentService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Student <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student student  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token number">1001</span> <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"------1001-张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1002</span>  <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"#######1002-李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>3）application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置服务名称 dubbo:application name="名称"</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">studentservice-provider</span><span class="token comment" spellcheck="true">#配置扫描的包， 扫描的@DubboService</span><span class="token attr-name">dubbo.scan.base-packages</span><span class="token punctuation">=</span><span class="token attr-value">com.bjpowernode.service</span><span class="token comment" spellcheck="true">#配置dubbo协议</span><span class="token comment" spellcheck="true">#dubbo.protocol.name=dubbo</span><span class="token comment" spellcheck="true">#dubbo.protocol.port=20881</span><span class="token comment" spellcheck="true">#注册中心</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://localhost:2181</span></code></pre><p>4)在启动类的上面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDubbo</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="7-4消费者"><a href="#7-4消费者" class="headerlink" title="7.4消费者"></a>7.4消费者</h2><p>创建SpringBoot项目</p><p>1） pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--加入公共项目的gav--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>022-interface-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--dubbo依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--zookeeper依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 排除log4j依赖 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>创建了Controller 或者 Service都可以</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 引用远程服务， 把创建好的代理对象，注入给studentService     */</span>    <span class="token comment" spellcheck="true">//@DubboReference(interfaceClass = StudentService.class,version = "1.0")</span>    <span class="token comment" spellcheck="true">/**     * 没有使用interfaceClass，默认的就是 引用类型的 数据类型      */</span>    <span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> StudentService studentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">queryStudent</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student student   <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">queryStudent</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"调用远程接口，获取对象："</span><span class="token operator">+</span>student<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>3）application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#指定服务名称</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">consumer-application</span><span class="token comment" spellcheck="true">#指定注册中心</span><span class="token attr-name">dubbo.registry.address</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://localhost:2181</span></code></pre><h2 id="7-5-练习"><a href="#7-5-练习" class="headerlink" title="7.5 练习"></a>7.5 练习</h2><p>使用的技术： SpringBoot ,Dubbo, Redis, MyBatis</p><p>Student表：</p><p><img src="D:\course\25-SpringBoot\笔记\images\image-20210119150418295.png" alt="image-20210119150418295">    </p><p>CREATE TABLE <code>student</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>name</code> varchar(255) COLLATE utf8_bin DEFAULT NULL,<br>  <code>phone</code> varchar(11) COLLATE utf8_bin DEFAULT NULL,<br>  <code>age</code> int(11) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;6 DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_bin;</p><ol><li>注册学生</li></ol><p>​     phone必须唯一， 如果已经存在了手机号， 注册失败的。 </p><p>​                 int addStudent(Student student);</p><p>​                返回值：int</p><p>​                 1： 注册成功</p><p>​                 2 ： 手机号已经存在  </p><p>​                                    </p><p>​      name至少两个字符，</p><p>​      age 必须 大于 0 </p><p>2） 查询学生，根据id查询，此学生。 </p><p>​        先到redis查询学生， 如果redis没有此学生，从数据库查询， 把查询到的学生放入到redis。</p><p>​      后面再次查询这个学生应该从redis就能获取到。</p><p>​        Student  queryStudent(Integer id);</p><ol start="3"><li>使用Dubbo框架，    addStudent, queryStudent 是有服务提供者实现的。</li></ol><p>​    消费者可以是一个Controller ， 调用提供者的两个方法。  实现注册和查询。</p><p>4）页面使用html和ajax，jquery。</p><p>​       在html页面中提供 form 注册学生， 提供文本框输入id，进行查询。</p><p>​      注册和查询都使用ajax技术。</p><p>​    html，jquery.js都放到resources&#x2F;static目录中</p><h2 id="第八章-打包"><a href="#第八章-打包" class="headerlink" title="第八章  打包"></a>第八章  打包</h2><h2 id="8-1-打包war"><a href="#8-1-打包war" class="headerlink" title="8.1 打包war"></a>8.1 打包war</h2><p>1.创建了一个jsp应用</p><p>2.修改pom.xml</p><p> 1)指定打包后的文件名称</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>2)指定jsp编译目录</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--resources插件， 把jsp编译到指定的目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--使用了mybatis ，而且mapper文件放在src/main/java目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--把src/main/resources下面的所有文件，都包含到classes目录--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>3）执行打包是war</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--打包类型--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></code></pre><p>4）主启动类继承SpringBootServletInitializer</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * SpringBootServletInitializer: 继承这个类， 才能使用独立tomcat服务器 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JspApplication</span>  <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>JspApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder builder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span>JspApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>5）部署war</p><p> 把war放到tomcat等服务器的发布目录中。  tomcat为例， myboot.war放到tomcat&#x2F;webapps目录。</p><h2 id="8-2-打包为jar"><a href="#8-2-打包为jar" class="headerlink" title="8.2 打包为jar"></a>8.2 打包为jar</h2><p>1.创建了一个包含了jsp的项目</p><p>2.修改pom.xml</p><p>​     1) 指定打包后的文件名称</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--打包后的文件名称--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>myboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>指定springboot-maven-plugin版本</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--打包jar， 有jsp文件时，必须指定maven-plugin插件的版本是 1.4.2.RELEASE--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre><p>3）最后执行 maven clean package</p><p>​       在target目录中，生成jar 文件， 例子是myboot.jar</p><p>​       执行独立的springboot项目  在cmd中 java  -jar  myboot.jar</p><h2 id="第九章-Thymeleaf-模板引擎"><a href="#第九章-Thymeleaf-模板引擎" class="headerlink" title="第九章 Thymeleaf 模板引擎"></a>第九章 Thymeleaf 模板引擎</h2><p>Thymeleaf： 是使用java开发的模板技术， 在服务器端运行。 把处理后的数据发送给浏览器。</p><p>​         模板是作视图层工作的。  显示数据的。  Thymeleaf是基于Html语言。 Thymleaf语法是应用在</p><p>​        html标签中 。 SpringBoot框架集成Thymealeaf,  使用Thymeleaf代替jsp。</p><p>Thymeleaf 的官方网站：<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>Thymeleaf 官方手册：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><h2 id="9-1-表达式"><a href="#9-1-表达式" class="headerlink" title="9.1 表达式"></a>9.1 表达式</h2><ol><li><p>标准变量表达式 </p><p>语法：  ${key} </p><p>作用： 获取key对于的文本数据，  key 是request作用域中的key ， 使用request.setAttribute(), model.addAttribute()</p><p>在页面中的 html标签中， 使用 th:text&#x3D;”${key}”</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>标准变量表达式:  $<span class="token entity" title="&#123;">&amp;#123;</span>key<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;site&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>key不存在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>获取SysUser对象 属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.id&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.sex&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：m男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.age&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser.getName()&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取姓名使用getXXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>选择变量表达式（ 星号变量表达式）</p><p>语法：  *{key}</p><p>作用： 获取这个key对应的数据，   *{key}需要和th:object 这个属性一起使用。</p><p>目的是简单获取对象的属性值。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用 *<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span> 获取SysUser的属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;id&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;sex&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;age&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用*<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span>完成的表示 对象的属性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*&amp;#123;myuser.name&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></li><li><p>链接表达式</p><p>语法： @{url}</p><p>作用： 表示链接， 可以</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> , <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>..<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="9-2-Thymeleaf属性"><a href="#9-2-Thymeleaf属性" class="headerlink" title="9.2  Thymeleaf属性"></a>9.2  Thymeleaf属性</h2><p>属性是放在html元素中的，就是html元素的属性，加入了th前缀。  属性的作用不变。    加入上th， 属性的值由模板引擎处理了。  在属性可以使用变量表达式</p><p>例如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/loginServlet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;methodAttr&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="9-3-each"><a href="#9-3-each" class="headerlink" title="9.3 each"></a>9.3 each</h2><p>each循环， 可以循环List，Array</p><p>语法：</p><p>在一个html标签中，使用th:each</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合循环成员,循环的状态变量:$&amp;#123;key&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;集合循环成员&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是"集合循环成员Stat"</code></pre><p>each循环Map</p><p>在一个html标签中，使用th:each</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>集合循环成员,循环的状态变量:$&amp;#123;key&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;集合循环成员.key&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;集合循环成员.value&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是"集合循环成员Stat"key:map集合中的keyvalue：map集合key对应的value值</code></pre><h2 id="9-4-th-if"><a href="#9-4-th-if" class="headerlink" title="9.4 th:if"></a>9.4 th:if</h2><p>“th:if”  : 判断语句， 当条件为true， 显示html标签体内， 反之不显示 没有else语句</p><pre class=" language-xml"><code class="language-xml">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 10 <span class="token punctuation">></span> 0 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 显示文本内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>还有一个 th:unless  和 th:if相反的行为</p><pre class=" language-xml"><code class="language-xml">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 10 &lt; 0 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 当条件为false显示标签体内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>例子：if</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span> if 使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;sex<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>m<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别是男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已经登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;age <span class="token punctuation">></span> 20&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄大于20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--""空字符是true--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>name是“”<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--null是false--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isOld&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> isOld是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>例子： unless</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>unless: 判断条件为false，显示标签体内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;sex<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>f<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性别是男的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isOld&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> isOld是null <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-5-th-switch"><a href="#9-5-th-switch" class="headerlink" title="9.5  th:switch"></a>9.5  th:switch</h2><p>th:switch 和 java中的swith一样的</p><pre class=" language-html"><code class="language-html">语法：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>要比对的值<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        结果1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>值2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        结果2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        默认结果    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    以上的case只有一个语句执行    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-6-th-inline"><a href="#9-6-th-inline" class="headerlink" title="9.6 th:inline"></a>9.6 th:inline</h2><ol><li><p>内联text：  在html标签外，获取表达式的值</p><p>语法： </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>显示姓名是：[[$<span class="token entity" title="&#123;">&amp;#123;</span>key<span class="token entity" title="&#125;">&amp;#125;</span>]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内联 text, 使用内联表达式显示变量的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是[[$<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span>]]，年龄是[[$<span class="token entity" title="&#123;">&amp;#123;</span>age<span class="token entity" title="&#125;">&amp;#125;</span>]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            我是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>,年龄是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;age&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>使用内联text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是[[$<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span>]],性别是[[$<span class="token entity" title="&#123;">&amp;#123;</span>sex<span class="token entity" title="&#125;">&amp;#125;</span>]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>内联javascript</p></li></ol><pre class=" language-html"><code class="language-html">例子： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">         <span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> myage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//alert("获取的模板中数据 "+ myname + ","+myage)</span>        <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"单击事件，获取数据 "</span><span class="token operator">+</span> myname <span class="token operator">+</span> <span class="token string">","</span><span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="9-7-字面量"><a href="#9-7-字面量" class="headerlink" title="9.7  字面量"></a>9.7  字面量</h2><p>例子：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>文本字面量: 使用单引号括起来的字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+$&amp;#123;name&amp;#125;+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+$&amp;#123;city&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>数字字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;20<span class="token punctuation">></span>5&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 20大于 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>boolean字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户已经登录系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>null字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser !<span class="token punctuation">=</span> null&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>有myuser数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-8-字符串连接"><a href="#9-8-字符串连接" class="headerlink" title="9.8  字符串连接"></a>9.8  字符串连接</h2><p>连接字符串有两种语法</p><p>1） 语法使用 单引号括起来字符串  ， 使用 + 连接其他的 字符串或者表达式</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+$&amp;#123;name&amp;#125;+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+$&amp;#123;city&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>2）语法：使用双竖线， |字符串和表达式|</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|我是$&amp;#123;name&amp;#125;,我所在城市$&amp;#123;city|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    显示数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>例子：</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>字符串连接方式1：使用单引号括起来的字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>我是<span class="token punctuation">'</span>+$&amp;#123;name&amp;#125;+<span class="token punctuation">'</span>,我所在的城市<span class="token punctuation">'</span>+$&amp;#123;city&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>字符串连接方式2：|字符串和表达式|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|我是$&amp;#123;name&amp;#125;,所在城市$&amp;#123;city&amp;#125;,其他人$&amp;#123;myuser.name&amp;#125;|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="9-9-运算符"><a href="#9-9-运算符" class="headerlink" title="9.9 运算符"></a>9.9 运算符</h2><pre class=" language-xml"><code class="language-xml">算术运 算： + , - - , * , / , %关系比较 : > , &lt; , >= , &lt;= ( gt , lt , ge , le )相等判断： == , != ( eq , ne )<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">400</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>使用运算符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;age <span class="token punctuation">></span> 10&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄大于 10 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123; 20 + 30 &amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示运算结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser <span class="token punctuation">=</span><span class="token punctuation">=</span> null&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser eq null&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;myuser ne null&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>myuser不是null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true ? <span class="token punctuation">'</span>用户已经登录<span class="token punctuation">'</span> : <span class="token punctuation">'</span>用户需要登录<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;isLogin <span class="token punctuation">=</span><span class="token punctuation">=</span> true ? ( age <span class="token punctuation">></span> 10 ? <span class="token punctuation">'</span>用户是大于10的<span class="token punctuation">'</span> : <span class="token punctuation">'</span>用户年龄比较小<span class="token punctuation">'</span>) : <span class="token punctuation">'</span>用户需要登录<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>三元运算符： 表达式  ？ true的结果 : false的结果三元运算符可以嵌套</code></pre><h2 id="9-10-内置对象"><a href="#9-10-内置对象" class="headerlink" title="9.10 内置对象"></a>9.10 内置对象</h2><p>文档地址：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc</a>.</p><p>#request 表示 HttpServletRequest</p><p>#session 表示 HttpSession对象</p><p>session 表示Map对象的， 是#session的简单表示方式， 用来获取session中指定的key的值</p><p>​               #session.getAttribute(“loginname”) &#x3D;&#x3D; session.loginname</p><p>这些是内置对象，可以在模板文件中直接使用。</p><p>&#96;&#96;&#96;html<br>例子：<br> <div style="margin-left: 350px"><br>        <h3>内置对象#request,#session，session的使用</h3><br>        <p>获取作用域中的数据</p><br>        &lt;p th:text&#x3D;”$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/10/hello-world/"/>
      <url>/2022/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
